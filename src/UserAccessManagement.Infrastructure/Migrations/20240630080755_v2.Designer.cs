// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserAccessManagement.Infrastructure.Data.Context;

#nullable disable

namespace UserAccessManagement.Infrastructure.Data.Migrations
{
    [DbContext(typeof(UserAccessManagementDbContext))]
    [Migration("20240630080755_v2")]
    partial class v2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("UserAccessManagement.Domain.Entities.EligibilityFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("employer_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("eligibility_file_pk");

                    b.HasIndex("EmployerId")
                        .HasDatabaseName("eligibility_file_employer_id_idx");

                    b.ToTable("eligibility_file", (string)null);
                });

            modelBuilder.Entity("UserAccessManagement.Domain.Entities.EligibilityFileLine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("active");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<long>("EligibilityFileId")
                        .HasColumnType("bigint")
                        .HasColumnName("eligibility_file_id");

                    b.Property<int>("LineType")
                        .HasColumnType("int")
                        .HasColumnName("line_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("eligibility_file_line_pk");

                    b.HasIndex("EligibilityFileId");

                    b.ToTable("eligibility_file_line", (string)null);
                });

            modelBuilder.Entity("UserAccessManagement.Domain.Entities.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("active");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("birth_date");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<long>("EligibilityFileLineId")
                        .HasColumnType("bigint")
                        .HasColumnName("eligibility_file_line_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("employer_id");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("full_name");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("salary");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("employee_pk");

                    b.HasIndex("EligibilityFileLineId");

                    b.HasIndex("EmployerId");

                    b.ToTable("employee", (string)null);
                });

            modelBuilder.Entity("UserAccessManagement.Domain.Entities.Employer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Employer");
                });

            modelBuilder.Entity("UserAccessManagement.Domain.Entities.EligibilityFileLine", b =>
                {
                    b.HasOne("UserAccessManagement.Domain.Entities.EligibilityFile", "EligibilityFile")
                        .WithMany()
                        .HasForeignKey("EligibilityFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EligibilityFile");
                });

            modelBuilder.Entity("UserAccessManagement.Domain.Entities.Employee", b =>
                {
                    b.HasOne("UserAccessManagement.Domain.Entities.EligibilityFileLine", "EligibilityFileLine")
                        .WithMany()
                        .HasForeignKey("EligibilityFileLineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UserAccessManagement.Domain.Entities.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EligibilityFileLine");

                    b.Navigation("Employer");
                });
#pragma warning restore 612, 618
        }
    }
}
